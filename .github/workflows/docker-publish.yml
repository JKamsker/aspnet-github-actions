name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  # pull_request:

env:
  IMAGE_NAME: aspnet-github-actions

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          # set state
          echo "action_state=yellow" >> $GITHUB_ENV

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: build_and_push

    steps:
      - name: Use the value
        id: step_two
        run: |
          echo "${{ env.action_state }}" # This will output 'yellow'
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          HOST: ${{ secrets.DOCKERDEPLOY_HOST }}
          USERNAME: ${{ secrets.DOCKERDEPLOY_HOST_USER }}
          KEY: ${{ secrets.DOCKERDEPLOY_PK }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,COMMAND,IMAGE_ID
          script: |
            echo $(echo $IMAGE_ID)
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

            docker pull docker.pkg.github.com/jkamsker/aspnet-github-actions/aspnet-github-actions:latest
            
            echo Remove old container
            docker rm -f webapp


            echo Run a new container from a new image
            docker run --rm -d -p 8080:80 --name webapp docker.pkg.github.com/jkamsker/aspnet-github-actions/aspnet-github-actions